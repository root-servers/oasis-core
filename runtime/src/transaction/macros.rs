/// Registers defined transaction methods into the transaction dispatcher.
///
/// # Examples
///
/// This macro should be invoked using a concrete API generated by `runtime_api`
/// as follows:
/// ```rust,ignore
/// with_api! {
///     register_runtime_txn_methods!(txn_dispatcher, api);
/// }
/// ```
#[macro_export]
#[deprecated(note = "see oasis-core#3572")]
macro_rules! register_runtime_txn_methods {
    (
        $txn_dispatcher:ident,
        $(
            pub fn $method_name:ident ( $arguments_type:ty ) -> $output_type:ty ;
        )*
    ) => {
        $(
            $txn_dispatcher.add_method(
                $crate::transaction::dispatcher::Method::new(
                    $crate::transaction::dispatcher::MethodDescriptor {
                        name: stringify!($method_name).to_owned(),
                    },
                    |args: &$arguments_type,
                     ctx: &mut $crate::transaction::context::Context|
                        -> ::anyhow::Result<$output_type> {
                        $method_name(args, ctx)
                    },
                )
            );
        )*
    }
}
